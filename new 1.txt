var LEFT = 0;
var RIGHT = 1;

var ANIM_IDLE_LEFT = 0;
var ANIM_JUMP_LEFT = 1;
var ANIM_WALK_LEFT = 2;
var ANIM_IDLE_RIGHT = 3;
var ANIM_JUMP_RIGHT = 4;
var ANIM_WALK_RIGHT = 5;
var ANIM_SHOOT_IDLE_RIGHT = 6;
var ANIM_SHOOT_IDLE_LEFT = 7;
var ANIM_SHOOT_RIGHT = 8;
var ANIM_SHOOT_LEFT = 9;
var ANIM_MAX = 10;

var Player = function() {	
	this.sprite = new Sprite("herospritesheet2.png");
	this.sprite.buildAnimation(10, 13, 64, 64, 0.15, // 0
			[20, 21, 22, 23, 24, 25, 26, 27]); 
	this.sprite.buildAnimation(10, 13, 64, 64, 0.1, // 1
			[60, 61, 62, 63, 64, 65, 66, 67, 68, 69]);
	this.sprite.buildAnimation(10, 13, 64, 64, 0.05, // 2
			[40, 41, 42, 43, 44, 45, 46]);
	this.sprite.buildAnimation(10, 13, 64, 64, 0.15, // 3
			[10, 11, 12, 13, 14, 15, 16, 17]);
	this.sprite.buildAnimation(10, 13, 64, 64, 0.05, // 4
			[50, 51, 52, 53, 54, 55, 56, 57, 58, 59]); 	
	this.sprite.buildAnimation(10, 13, 64, 64, 0.05, // 5
			[30, 31, 32, 33, 34, 35, 36, 37]);
	this.sprite.buildAnimation(10, 13, 64, 64, 0.05, // 6
			[70, 71, 72, 73, 74, 75, 76, 77]);
    this.sprite.buildAnimation(10, 13, 64, 64, 0.05, // 7
			[80, 81, 82, 83, 84, 85, 86, 87]);
	this.sprite.buildAnimation(10, 13, 64, 64, 0.05, // 8
			[100, 101, 102, 103, 104, 105, 106, 107]);
	this.sprite.buildAnimation(10, 13, 64, 64, 0.05,
			[90, 91, 92, 93, 94, 95, 96, 97]);    //9
			
			
	for(var i=0; i < ANIM_MAX; i++)
	{
		this.sprite.setAnimationOffset(i, -55, -87);
	}
	
	this.position = new Vector2();
	this.position.set(1*TILE, 2*TILE);
	
	this.width = 64;
	this.height = 64;	
	
	this.velocity = new Vector2;
	
	this.falling = true;
	this.jumping = false;

	this.direction = LEFT;   
};

Player.prototype.update = function(deltaTime)
{		
	this.sprite.update(deltaTime);
// we'll insert code here later
	var left = false;
	var right = false;
	var jump = false;
	
	if(keyboard.isKeyDown(keyboard.KEY_LEFT) == true) {
		left = true;
	}
	if(keyboard.isKeyDown(keyboard.KEY_RIGHT) == true) {
		right = true;
	}
	if(keyboard.isKeyDown(keyboard.KEY_SPACE) == true) {
		jump = true;
	}
	
	var wasleft = this.velocity.x < 0;
	var wasright = this.velocity.x > 0;
	var falling = this.falling;
	var ddx = 0;
	var ddy = GRAVITY;
	
	if(left)
		ddx = ddx - ACCEL;
	else if (wasleft)
		ddx = ddx + FRICTION;
	
	if(right)
		ddx = ddx + ACCEL;
	
	else if (wasright)
		ddx = ddx - FRICTION;
	
	if(jump && !this.jumping && !falling)
	{
		ddy = ddy - JUMP;
		this.jumping = true;
	}
	
	this.position.y = Math.floor(this.position.y + (deltaTime * this.velocity.y));
	this.position.x = Math.floor(this.position.x + (deltaTime * this.velocity.x));
	this.velocity.x = bound(this.velocity.x + (deltaTime * ddx), -MAXDX, MAXDX);
	this.velocity.y = bound(this.velocity.y + (deltaTime * ddy), -MAXDY, MAXDY);
	
	if((wasleft && (this.velocity.x > 0)) ||
		(wasright && (this.velocity.x < 0)))
		{
			/// clamp at zero tp prevent friction
			this.velocity.x = 0;
		}
	
//collision detection

	var tx = pixelToTile(this.position.x);
	var ty = pixelToTile(this.position.y);
	var nx = (this.position.x)%TILE;
	var ny = (this.position.y)%TILE; 	// True if player overlaps below
	var cell = cellAtTileCoord(LAYER_PLATFORMS, tx, ty);
	var cellright = cellAtTileCoord(LAYER_PLATFORMS, tx + 1, ty);
	var celldown = cellAtTileCoord(LAYER_PLATFORMS, tx, ty + 1);
	var celldiag = cellAtTileCoord(LAYER_PLATFORMS, tx + 1, ty + 1);
	
	if(this.velocity.y > 0) {
		if((celldown && !cell) || (celldiag && !cellright && nx)) {
		this.position.y = tileToPixel(ty);
		this.velocity.y = 0;
		this.falling - false;
		this.jumping = false;
		ny = 0;
		}
	}
	else if (this.velocity.y < 0) {
	if((cell && !celldown) || (cellright && !celldiag && nx)) {
		this.position.y = tileToPixel(ty + 1);
		this.velocity.y = 0;
		cell = celldown;
		cellright = celldiag;
		ny = 0;
	}
	}
	if(this.velocity.x > 0) {
		if ((cellright && !cell) || (celldiag && !celldown && ny)) {
			this.position.x = tileToPixel(tx);
			this.velocity.x = 0;
			this.velocity.x = 0;
		}
	}
	else if (this.velocity.x < 0) {
		if((cell && !cellright) || (celldown && !celldiag && ny)) {
			this.position.x = tileToPixel(tx + 1);
			this.velocity,x = 0;
		}
	}	
}

Player.prototype.draw = function()
{
	this.sprite.draw(context,
		this.position.x, 
	this.position.y);
};